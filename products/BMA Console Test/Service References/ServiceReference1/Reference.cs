//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18051
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ConsoleApplication1.ServiceReference1 {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference1.IMain")]
    public interface IMain {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetDBStatus", ReplyAction="http://tempuri.org/IMain/GetDBStatusResponse")]
        bool GetDBStatus();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetDBStatus", ReplyAction="http://tempuri.org/IMain/GetDBStatusResponse")]
        System.Threading.Tasks.Task<bool> GetDBStatusAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionDate", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionDateResponse")]
        System.DateTime GetLatestTransactionDate();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionDate", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionDateResponse")]
        System.Threading.Tasks.Task<System.DateTime> GetLatestTransactionDateAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionDateDouble", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionDateDoubleResponse")]
        double GetLatestTransactionDateDouble(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionDateDouble", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionDateDoubleResponse")]
        System.Threading.Tasks.Task<double> GetLatestTransactionDateDoubleAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SyncTransactions", ReplyAction="http://tempuri.org/IMain/SyncTransactionsResponse")]
        bool SyncTransactions(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SyncTransactions", ReplyAction="http://tempuri.org/IMain/SyncTransactionsResponse")]
        System.Threading.Tasks.Task<bool> SyncTransactionsAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetAllTransactions", ReplyAction="http://tempuri.org/IMain/GetAllTransactionsResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetAllTransactions(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetAllTransactions", ReplyAction="http://tempuri.org/IMain/GetAllTransactionsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetAllTransactionsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactions", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionsResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetLatestTransactions(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactions", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetLatestTransactionsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionsOnDate", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionsOnDateResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetLatestTransactionsOnDate(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionsOnDate", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionsOnDateResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetLatestTransactionsOnDateAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionsLimit", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionsLimitResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetLatestTransactionsLimit(int latestRecs, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetLatestTransactionsLimit", ReplyAction="http://tempuri.org/IMain/GetLatestTransactionsLimitResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetLatestTransactionsLimitAsync(int latestRecs, int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetTransactionsForBudget", ReplyAction="http://tempuri.org/IMain/GetTransactionsForBudgetResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetTransactionsForBudget(int budgetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetTransactionsForBudget", ReplyAction="http://tempuri.org/IMain/GetTransactionsForBudgetResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetTransactionsForBudgetAsync(int budgetId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetImagesForTransaction", ReplyAction="http://tempuri.org/IMain/GetImagesForTransactionResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage> GetImagesForTransaction(int transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetImagesForTransaction", ReplyAction="http://tempuri.org/IMain/GetImagesForTransactionResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage>> GetImagesForTransactionAsync(int transactionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetAllBudgets", ReplyAction="http://tempuri.org/IMain/GetAllBudgetsResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> GetAllBudgets(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/GetAllBudgets", ReplyAction="http://tempuri.org/IMain/GetAllBudgetsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget>> GetAllBudgetsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/LoadItemCounts", ReplyAction="http://tempuri.org/IMain/LoadItemCountsResponse")]
        BMA.BusinessLogic.StartupInfo LoadItemCounts(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/LoadItemCounts", ReplyAction="http://tempuri.org/IMain/LoadItemCountsResponse")]
        System.Threading.Tasks.Task<BMA.BusinessLogic.StartupInfo> LoadItemCountsAsync(int userId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SaveTransactions", ReplyAction="http://tempuri.org/IMain/SaveTransactionsResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> SaveTransactions(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SaveTransactions", ReplyAction="http://tempuri.org/IMain/SaveTransactionsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> SaveTransactionsAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SaveBudgets", ReplyAction="http://tempuri.org/IMain/SaveBudgetsResponse")]
        System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> SaveBudgets(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> budgets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SaveBudgets", ReplyAction="http://tempuri.org/IMain/SaveBudgetsResponse")]
        System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget>> SaveBudgetsAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> budgets);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SaveTransactionImages", ReplyAction="http://tempuri.org/IMain/SaveTransactionImagesResponse")]
        bool SaveTransactionImages(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage> transactionImages);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IMain/SaveTransactionImages", ReplyAction="http://tempuri.org/IMain/SaveTransactionImagesResponse")]
        System.Threading.Tasks.Task<bool> SaveTransactionImagesAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage> transactionImages);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IMainChannel : ConsoleApplication1.ServiceReference1.IMain, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MainClient : System.ServiceModel.ClientBase<ConsoleApplication1.ServiceReference1.IMain>, ConsoleApplication1.ServiceReference1.IMain {
        
        public MainClient() {
        }
        
        public MainClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public MainClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public MainClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public bool GetDBStatus() {
            return base.Channel.GetDBStatus();
        }
        
        public System.Threading.Tasks.Task<bool> GetDBStatusAsync() {
            return base.Channel.GetDBStatusAsync();
        }
        
        public System.DateTime GetLatestTransactionDate() {
            return base.Channel.GetLatestTransactionDate();
        }
        
        public System.Threading.Tasks.Task<System.DateTime> GetLatestTransactionDateAsync() {
            return base.Channel.GetLatestTransactionDateAsync();
        }
        
        public double GetLatestTransactionDateDouble(int userId) {
            return base.Channel.GetLatestTransactionDateDouble(userId);
        }
        
        public System.Threading.Tasks.Task<double> GetLatestTransactionDateDoubleAsync(int userId) {
            return base.Channel.GetLatestTransactionDateDoubleAsync(userId);
        }
        
        public bool SyncTransactions(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions) {
            return base.Channel.SyncTransactions(transactions);
        }
        
        public System.Threading.Tasks.Task<bool> SyncTransactionsAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions) {
            return base.Channel.SyncTransactionsAsync(transactions);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetAllTransactions(int userId) {
            return base.Channel.GetAllTransactions(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetAllTransactionsAsync(int userId) {
            return base.Channel.GetAllTransactionsAsync(userId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetLatestTransactions(int userId) {
            return base.Channel.GetLatestTransactions(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetLatestTransactionsAsync(int userId) {
            return base.Channel.GetLatestTransactionsAsync(userId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetLatestTransactionsOnDate(int userId) {
            return base.Channel.GetLatestTransactionsOnDate(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetLatestTransactionsOnDateAsync(int userId) {
            return base.Channel.GetLatestTransactionsOnDateAsync(userId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetLatestTransactionsLimit(int latestRecs, int userId) {
            return base.Channel.GetLatestTransactionsLimit(latestRecs, userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetLatestTransactionsLimitAsync(int latestRecs, int userId) {
            return base.Channel.GetLatestTransactionsLimitAsync(latestRecs, userId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> GetTransactionsForBudget(int budgetId) {
            return base.Channel.GetTransactionsForBudget(budgetId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> GetTransactionsForBudgetAsync(int budgetId) {
            return base.Channel.GetTransactionsForBudgetAsync(budgetId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage> GetImagesForTransaction(int transactionId) {
            return base.Channel.GetImagesForTransaction(transactionId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage>> GetImagesForTransactionAsync(int transactionId) {
            return base.Channel.GetImagesForTransactionAsync(transactionId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> GetAllBudgets(int userId) {
            return base.Channel.GetAllBudgets(userId);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget>> GetAllBudgetsAsync(int userId) {
            return base.Channel.GetAllBudgetsAsync(userId);
        }
        
        public BMA.BusinessLogic.StartupInfo LoadItemCounts(int userId) {
            return base.Channel.LoadItemCounts(userId);
        }
        
        public System.Threading.Tasks.Task<BMA.BusinessLogic.StartupInfo> LoadItemCountsAsync(int userId) {
            return base.Channel.LoadItemCountsAsync(userId);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> SaveTransactions(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions) {
            return base.Channel.SaveTransactions(transactions);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction>> SaveTransactionsAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Transaction> transactions) {
            return base.Channel.SaveTransactionsAsync(transactions);
        }
        
        public System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> SaveBudgets(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> budgets) {
            return base.Channel.SaveBudgets(budgets);
        }
        
        public System.Threading.Tasks.Task<System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget>> SaveBudgetsAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.Budget> budgets) {
            return base.Channel.SaveBudgetsAsync(budgets);
        }
        
        public bool SaveTransactionImages(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage> transactionImages) {
            return base.Channel.SaveTransactionImages(transactionImages);
        }
        
        public System.Threading.Tasks.Task<bool> SaveTransactionImagesAsync(System.Collections.ObjectModel.ObservableCollection<BMA.BusinessLogic.TransactionImage> transactionImages) {
            return base.Channel.SaveTransactionImagesAsync(transactionImages);
        }
    }
}
